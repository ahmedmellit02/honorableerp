import { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/hooks/useAuth';
import { toast } from '@/hooks/use-toast';

export interface Quote {
  id: string;
  user_id: string;
  prospect_id: string;
  quote_number: string;
  service_type?: string;
  destination?: string;
  departure_date?: string;
  return_date?: string;
  passengers_count?: number;
  total_amount?: number;
  status: 'draft' | 'sent' | 'accepted' | 'rejected' | 'expired';
  valid_until?: string;
  notes?: string;
  created_at: string;
  updated_at: string;
  // Joined data
  prospect_name?: string;
  prospect?: {
    name: string;
    email?: string;
    phone?: string;
    company?: string;
  };
}

export interface CreateQuoteData {
  prospect_id: string;
  service_type?: string;
  destination?: string;
  departure_date?: string;
  return_date?: string;
  passengers_count?: number;
  total_amount?: number;
  valid_until?: string;
  notes?: string;
}

export function useQuotes() {
  const { user } = useAuth();
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchQuotes = async () => {
    try {
      setLoading(true);
      setError(null);

      const { data, error } = await supabase
        .from('quotes')
        .select(`
          *,
          prospects:prospect_id (
            name,
            email,
            phone,
            company
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      // Transform data to include prospect_name for compatibility
      const transformedData = (data || []).map(quote => ({
        ...quote,
        prospect_name: quote.prospects?.name || 'Prospect inconnu',
        prospect: quote.prospects
      }));

      setQuotes(transformedData);
    } catch (err) {
      console.error('Error fetching quotes:', err);
      setError('Erreur lors du chargement des devis');
      toast({
        title: "Erreur",
        description: "Impossible de charger les devis",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const createQuote = async (quoteData: CreateQuoteData) => {
    try {
      if (!user) throw new Error('Utilisateur non connecté');

      // quote_number is auto-generated by database trigger
      const insertData: any = {
        ...quoteData,
        user_id: user.id,
        status: 'draft',
      };

      const { data, error } = await supabase
        .from('quotes')
        .insert(insertData)
        .select(`
          *,
          prospects:prospect_id (
            name,
            email,
            phone,
            company
          )
        `)
        .single();

      if (error) throw error;

      const transformedQuote = {
        ...data,
        prospect_name: data.prospects?.name || 'Prospect inconnu',
        prospect: data.prospects
      };

      setQuotes(prev => [transformedQuote, ...prev]);
      
      toast({
        title: "Succès",
        description: "Devis créé avec succès!"
      });

      return transformedQuote;
    } catch (err) {
      console.error('Error creating quote:', err);
      toast({
        title: "Erreur",
        description: "Impossible de créer le devis",
        variant: "destructive"
      });
      throw err;
    }
  };

  const updateQuote = async (id: string, updates: Partial<Quote>) => {
    try {
      const { data, error } = await supabase
        .from('quotes')
        .update(updates)
        .eq('id', id)
        .select(`
          *,
          prospects:prospect_id (
            name,
            email,
            phone,
            company
          )
        `)
        .single();

      if (error) throw error;

      const transformedQuote = {
        ...data,
        prospect_name: data.prospects?.name || 'Prospect inconnu',
        prospect: data.prospects
      };

      setQuotes(prev => 
        prev.map(quote => 
          quote.id === id ? { ...quote, ...transformedQuote } : quote
        )
      );

      toast({
        title: "Succès",
        description: "Devis mis à jour avec succès!"
      });

      return transformedQuote;
    } catch (err) {
      console.error('Error updating quote:', err);
      toast({
        title: "Erreur",
        description: "Impossible de mettre à jour le devis",
        variant: "destructive"
      });
      throw err;
    }
  };

  const sendQuote = async (id: string) => {
    return updateQuote(id, { status: 'sent' });
  };

  const acceptQuote = async (id: string) => {
    return updateQuote(id, { status: 'accepted' });
  };

  const rejectQuote = async (id: string) => {
    return updateQuote(id, { status: 'rejected' });
  };

  const getQuotesByStatus = (status: string) => {
    return quotes.filter(quote => quote.status === status);
  };

  const getQuotesByProspect = (prospectId: string) => {
    return quotes.filter(quote => quote.prospect_id === prospectId);
  };

  const getTotalQuoteValue = () => {
    return quotes
      .filter(quote => quote.status !== 'rejected')
      .reduce((total, quote) => total + (quote.total_amount || 0), 0);
  };

  const getActiveQuotes = () => {
    return quotes.filter(quote => 
      quote.status === 'draft' || quote.status === 'sent'
    );
  };

  useEffect(() => {
    if (user) {
      fetchQuotes();
    }
  }, [user]);

  return {
    quotes,
    loading,
    error,
    createQuote,
    updateQuote,
    sendQuote,
    acceptQuote,
    rejectQuote,
    refetch: fetchQuotes,
    getQuotesByStatus,
    getQuotesByProspect,
    getTotalQuoteValue,
    getActiveQuotes
  };
}