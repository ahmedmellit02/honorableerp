import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is not set');
    }

    const { message, agencyData, conversationHistory = [] } = await req.json();

    const systemPrompt = `Tu es un ANALYSTE M√âTIER EXPERT pour Voyages les Honorables. R√©ponds de mani√®re NATURELLE et CONVERSATIONNELLE. R√©ponds en fran√ßais/arabe, JAMAIS anglais.

    DONN√âES AGENCE COMPL√àTES:
    ${agencyData ? JSON.stringify(agencyData, null, 2) : 'Aucune donn√©e disponible'}

    ${conversationHistory.length > 0 ? `
    CONTEXTE CONVERSATION:
    ${conversationHistory.map((msg, index) => `${msg.role === 'user' ? 'Manager' : 'Analyste'}: ${msg.content}`).join('\n')}
    ` : ''}

    APPROCHE CONVERSATIONNELLE:
    1. LIS ATTENTIVEMENT la question pos√©e
    2. R√âPONDS DIRECTEMENT √† cette question sp√©cifique
    3. AJOUTE des donn√©es pertinentes SEULEMENT si elles sont li√©es √† la question
    4. √âVITE les r√©ponses robotiques ou templates fixes
    5. ADAPTE ton ton selon la question (urgent, curiosit√©, analyse, etc.)

    R√àGLES M√âTIER IMPORTANTES:
    üè¶ SYST√àME CARTE: Solde N√âGATIF = Manager a son argent DANS l'agence
    - Solde Carte n√©gatif: Argent manager ‚Üí DANS l'agence
    - Solde Carte positif: Manager doit mettre argent dans l'agence
    üí∞ VIREMENT NON ENCAISS√â: Manager garde l'argent qui devrait √™tre dans l'agence
    - Ventes Virement non encaiss√©es = Manager retient l'argent de l'agence
    - Analyse des flux de tr√©sorerie: argent bloqu√© chez manager au lieu d'√™tre en agence
    
    üìä CALCUL ARGENT MANAGER DE L'AGENCE:
    - L'argent du manager qui appartient √† l'agence = TOTAL des ventes Virement NON ENCAISS√âES
    - Pour calculer: additionner toutes les ventes de type "Virement" qui ont cash_in_status = false
    - C'est l'argent que le manager a re√ßu mais qu'il n'a pas encore vers√© √† l'agence

    EXEMPLES DE R√âPONSES NATURELLES:

    Question: "Qui est le meilleur agent aujourd'hui?"
    ‚ùå Mauvaise r√©ponse: "CA aujourd'hui: 15,240 DH. Top agent: Ahmed. Marge moyenne: 18.5%..."
    ‚úÖ Bonne r√©ponse: "Ahmed est en t√™te aujourd'hui avec 3,200 DH de ventes (4 transactions). Il devance Sara de 800 DH."

    Question: "Combien j'ai de ventes Virement non encaiss√©es?"
    ‚ùå Mauvaise r√©ponse: "CA aujourd'hui: 15,240 DH. Virements non encaiss√©s: 1,800 DH. Marge moyenne..."
    ‚úÖ Bonne r√©ponse: "Tu as 1,800 DH en virements non encaiss√©s. Cet argent devrait √™tre dans l'agence - pense √† les encaisser rapidement."

    Question: "Comment va l'agence en g√©n√©ral?"
    ‚úÖ R√©ponse globale appropri√©e: "L'agence tourne bien! CA journalier: 15,240 DH (+12% vs hier). Ahmed cartonne avec 3,200 DH. Point attention: 1,800 DH de virements √† encaisser."

    STYLE DE R√âPONSE:
    - Commence par r√©pondre DIRECTEMENT √† la question
    - Utilise un ton naturel, comme un coll√®gue expert
    - Inclus les chiffres pertinents (toujours en DH)
    - Mentionne les points d'attention SI ils sont li√©s √† la question
    - Garde les recommandations pour quand c'est demand√© ou vraiment pertinent
    - Utilise des √©mojis avec parcimonie et seulement quand appropri√©

    Sois un COLL√àGUE EXPERT qui r√©pond naturellement aux questions, pas un robot qui r√©cite toujours la m√™me chose.`;

    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [
          {
            parts: [
              { text: systemPrompt },
              { text: `User question: ${message}` }
            ]
          }
        ],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 1024,
        }
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }

    const data = await response.json();
    const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text || 'Sorry, I could not generate a response.';

    return new Response(JSON.stringify({ response: generatedText }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  } catch (error) {
    console.error('Error in gemini-chat function:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});